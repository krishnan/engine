/*
 * SPDXVersion: SPDX-1.1
 * Creator: Person: Nuno Brito (nuno.brito@triplecheck.de)
 * Creator: Organization: TripleCheck (contact@triplecheck.de)
 * Created: 2014-11-23T18:41:10Z
 * LicenseName: EUPL-1.1-without-appendix
 * FileName: LicenseListGenerate.java  
 * FileCopyrightText: <text> Copyright 2014 Nuno Brito, TripleCheck </text>
 * FileComment: <text> Find the license classes inside our licenses folder
    and then create a new class where they are defined.</text> 
 */

package license.generator;

import definitions.is;
import java.io.File;
import java.util.ArrayList;
import main.script.log;
import license.License;

/**
 *
 * @author Nuno Brito, 23rd of November 2014 in Darmstadt, Germany.
 *  nuno.brito@triplecheck.de | http://nunobrito.eu
 */
public final class LicenseListGenerate {

    // where we write the list of classes compiled
    StringBuilder output = new StringBuilder();
    
    public LicenseListGenerate(){
        processList();
        generateNewClassList();
    } 
    
    /**
     * Add up all the extensions that we have available on disk
     */
    public void processList() {
        // clear up the list to avoid duplicates
        ArrayList<File> files = utils.files.findFilesFiltered(License.folder, ".java", 5);
        log.write(is.INFO, "Adding files from %1", License.folder.getAbsolutePath());
        log.write(is.INFO, "Files to process: %1", files.size() + "");
        for(File file : files){   
            // ignore the extensions inside the "unknown" folder
            if(file.getName().endsWith("Template.java")){
                continue;
            }
            if(file.getName().endsWith("List.java")){
                continue;
            }
            
            
            
            // get the extension interpreted
            License temp = null;
//            try{
//                final Object obj = utils.bytecode.getObject(file);
//                temp = (License) obj;
//            } catch(Exception e){
//                log.write(is.ERROR, "EC88 - Failed to load extension: %1", 
//                        file.getAbsolutePath());
//            }
//            
//            
//            // no need for null values
//            if(temp == null){
//                continue;
//            }
            
            // add it up to our lists
            processTarget(temp, License.folder, file);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        LicenseListGenerate generate = new LicenseListGenerate();
    }

    /**
     * Process each extension
     * @param target 
     */
    private void processTarget(final License target, File folder,
            File file) {
        
        String path = file.getAbsolutePath().replace(folder.getAbsolutePath(), "");
        // convert paths to dots
        path = path.replace("/", ".");
        // do the same if we are running from Windows
        path = path.replace("\\", ".");
        // remove the .java extension from the class
        path = path.substring(1, path.length() - 5);
        

        // convert this tidybut to a java code snippet
        final String snippet = "\tlist.add(new " 
                + "license.terms."
                + path + "());\n";
        
        // add to the list
        output = output.append(snippet);
        // output the result to provide visual feedback
        System.out.println(snippet);
        
    }

    /**
     * Read the template file and generate a new list
     */
    private void generateNewClassList() {
        
        // where the source code template is located
        File sourceCodeTemplate = new File(License.folder, "LicenseListTemplate.java");
        
        // where the final source code file will be located
        File sourceCodeFile = new File(License.folder, "LicenseList.java");
        
        // read the code
        String sourceCodeText = utils.files.readAsString(sourceCodeTemplate);
        
        // replace the template with the real content
        sourceCodeText = sourceCodeText.replace("//LicenseList", output.toString());
        // replace the class denominations
        sourceCodeText = sourceCodeText.replaceAll(" LicenseListTemplate", " LicenseList");
        //sourceCodeText = sourceCodeText.replaceAll("package generators;", "package spdxlib;");
        // add the time stamp
        sourceCodeText = sourceCodeText.replaceAll("Created: %templatetime%", "Created: " + utils.time.getDateSPDX());
        // mark as generated by machine
        sourceCodeText = sourceCodeText.replaceAll("FileOrigin: Authored", "FileOrigin: Auto" + "-Generated");
        
        // write it back to disk
        utils.files.SaveStringToFile(sourceCodeFile, sourceCodeText);
        
    }
    
}
